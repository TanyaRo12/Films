using MovieRecommendationAPI.Models;

namespace MovieRecommendationAPI.Services
{
    // Реализация интерфейса IMovieService
    public class MovieService : IMovieService
    {
        // База данных фильмов в памяти
        private readonly List<Movie> _movieDatabase = new()
        {
            new Movie
            {
                Id = 1,
                Title = "Начало",
                Description = "Талантливый вор, специализирующийся на краже ценных секретов из подсознания во время сна, получает задание внедрить идею в сознание другого человека.",
                Genre = new List<string> { "фантастика", "боевик", "триллер" },
            },
            new Movie
            {
                Id = 2,
                Title = "Побег из Шоушенка",
                Description = "Бухгалтер Энди Дюфрейн обвинён в убийстве собственной жены и её любовника. Оказавшись в тюрьме под названием Шоушенк, он сталкивается с жестокостью и беззаконием, царящими по обе стороны решётки.",
                Genre = new List<string> { "драма" },
            },
            new Movie
            {
                Id = 3,
                Title = "Тёмный рыцарь",
                Description = "Бэтмен поднимает ставки в войне с криминалом. С помощью лейтенанта Джима Гордона и прокурора Харви Дента он намерен очистить улицы от преступности, отравляющей город.",
                Genre = new List<string> { "фантастика", "боевик", "драма", "криминал" },
            },
            new Movie
            {
                Id = 4,
                Title = "Король Лев",
                Description = "У великого короля-льва Муфасы рождается наследник по имени Симба. Но завистливый брат Муфасы Шрам хочет занять трон любой ценой.",
                Genre = new List<string> { "мультфильм", "мюзикл", "драма", "приключения", "семейный" },
            },
            new Movie
            {
                Id = 5,
                Title = "Ходячий замок",
                Description = "Злая ведьма заточила 18-летнюю Софи в тело старухи. Девушка-бабушка бежит из города в горы, где встречает удивительный дом на ногах, принадлежащий чародею Хаулу.",
                Genre = new List<string> { "мультфильм", "фэнтези", "приключения" },
            },
            new Movie
            {
                Id = 6,
                Title = "Форрест Гамп",
                Description = "От лица главного героя Форреста Гампа, слабоумного безобидного человека с благородным и открытым сердцем, рассказывается история его необыкновенной жизни.",
                Genre = new List<string> { "драма", "комедия", "мелодрама" },
            },
            new Movie
            {
                Id = 7,
                Title = "Криминальное чтиво",
                Description = "Двое бандитов Винсент Вега и Джулс Винфилд ведут философские беседы в перерывах между разборками и решением проблем с должниками криминального босса.",
                Genre = new List<string> { "криминал", "драма" },
            },
            new Movie
            {
                Id = 8,
                Title = "Матрица",
                Description = "Хакер Нео узнает, что его мир — виртуальный. Выдающийся киберпанк-боевик о борьбе с машинами, поработившими человечество.",
                Genre = new List<string> { "фантастика", "боевик" },
            },
            new Movie
            {
                Id = 9,
                Title = "Зеленая миля",
                Description = "Пол Эджкомб — начальник блока смертников в тюрьме «Холодная гора», каждый из узников которого однажды проходит «зеленую милю» по пути к месту казни.",
                Genre = new List<string> { "драма", "фэнтези", "криминал" },
            },
            new Movie
            {
                Id = 10,
                Title = "Список Шиндлера",
                Description = "История немецкого промышленника Оскара Шиндлера, спасшего тысячи евреев во время Холокоста.",
                Genre = new List<string> { "драма", "биография", "история" },
            }
        };

        // Метод для получения случайного фильма из базы
        public Movie GetRandomMovie()
        {
            // Создаем генератор случайных чисел
            var random = new Random();

            // Генерируем случайный индекс в пределах количества фильмов в базе
            var movieIndex = random.Next(_movieDatabase.Count);

            // Возвращаем фильм по случайному индексу
            return _movieDatabase[movieIndex];
        }

        // Метод для получения всех фильмов из базы
        public List<Movie> GetAllMovies()
        {
            // Возвращаем полную копию списка фильмов
            return new List<Movie>(_movieDatabase);
        }

        // Метод для получения фильма по его ID
        public Movie GetMovieById(int id)
        {
            // Ищем фильм по ID в базе данных
            var movie = _movieDatabase.FirstOrDefault(m => m.Id == id);

            // Если фильм не найден, выбрасываем исключение
            if (movie == null)
            {
                throw new ArgumentException($"Фильм с ID {id} не найден");
            }

            // Возвращаем найденный фильм
            return movie;
        }
    }
}